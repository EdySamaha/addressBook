from django.shortcuts import render

from django.http import HttpResponse
from django.template import loader
from .forms import Userid,Orgid, RegisterOrg,RegisterUser
# from .forms import UserSerializer,OrganizationSerializer
from .models import User,Organization
#API
# from rest_framework import viewsets, status
# from rest_framework.response import Response
# from rest_framework.views import APIView

def index(request): #get all data from dbs
    orgs= Organization.objects.all()
    users= User.objects.all()
    return render(request, 'index.html', {'orgs':orgs, 'users':users})


orgselected=False
exists=False

#region User
def registerUser(request):
	global orgselected, exists
	orgselected=False
	exists=False
	if request.method == 'POST':
		form = RegisterUser(request.POST)
		if form.is_valid():
			userform = form.cleaned_data
			# userid = userform['user_id'] #autogenerated
			username = userform['username']
			email = userform['email']
			phone = userform['phone']
			User.objects.create(username=username, email=email, phone=phone)
			
			users=User.objects.all()
			# print("type of users:",type(users))
			return render(request, 'register.html', {'form': form,'users':users, 'orgselected':orgselected, 'exists':exists})
	else:
		form = RegisterUser()
	users=User.objects.all()
	# print("type of users:",type(users))
	return render(request, 'register.html', {'form': form,'users':users, 'orgselected':orgselected})

def updateUser(request):
	user = User.objects.get(user_id=pk)
	form = RegisterUser(request.POST)
	if form.is_valid():
		userform = form.cleaned_data
		# userid = userform['user_id'] #autogenerated
		username = userform['username']
		email = userform['email']
		phone = userform['phone']
		User.objects.update(username=username, email=email, phone=phone)
		
		users=User.objects.all()
		# print("type of users:",type(users))
		return render(request, 'register.html', {'form': form,'users':users})

def deletUser(request):
	user = User.objects.get(user_id=pk)
	user.delete()
	return render(request, 'index.html')
#endregion

#region Org
def registerOrg(request):
	global orgselected, exists
	orgselected=True
	exists=False
	if request.method == 'POST':
		form = RegisterOrg(request.POST)
		if form.is_valid():
			userform = form.cleaned_data
			# userid = userform['user_id'] #autogenerated
			orgname = userform['orgname']
			email = userform['email']
			phone = userform['phone']
			Organization.objects.create(orgname=orgname, email=email, phone=phone)
			
			orgs=Organization.objects.all()
			# print("type of orgs:",type(orgs))
			return render(request, 'register.html', {'form': form,'orgs':orgs, 'orgselected':orgselected, 'exists':exists})
	else:
		form = RegisterOrg()
	orgs=Organization.objects.all()
	# print("type of orgs:",type(orgs))
	return render(request, 'register.html', {'form': form,'orgs':orgs, 'orgselected':orgselected})

def updateOrg(request):
	org = Organization.objects.get(org_id=pk)
	form = RegisterOrg(request.POST)
	if form.is_valid():
		userform = form.cleaned_data
		# userid = userform['user_id'] #autogenerated
		orgname = userform['orgname']
		email = userform['email']
		phone = userform['phone']
		User.objects.update(orgname=orgname, email=email, phone=phone)
		
		orgs=User.objects.all()
		# print("type of orgs:",type(orgs))
		return render(request, 'register.html', {'form': form,'orgs':orgs})

def deleteOrg(request):
	org = Organization.objects.get(org_id=pk)
	org.delete()
	return render(request, 'index.html')
#endregion

# class UserViewSet(viewsets.ViewSet):
#     def getall(self, request):
#         Users = User.objects.all()
#         serializer = UserSerializer(Users, many=True)
#         return Response(serializer.data)

#     def create(self, request):
#         serializer = UserSerializer(data=request.data)
#         serializer.is_valid(raise_exception=True)
#         serializer.save()
#         publish('User_created', serializer.data)
#         return Response(serializer.data, status=status.HTTP_201_CREATED)

#     def retrieve(self, request, pk=None):
#         User = User.objects.get(id=pk)
#         serializer = UserSerializer(User)
#         return Response(serializer.data)

#     def update(self, request, pk=None):
#         User = User.objects.get(id=pk)
#         serializer = UserSerializer(instance=User, data=request.data)
#         serializer.is_valid(raise_exception=True)
#         serializer.save()
#         publish('User_updated', serializer.data)
#         return Response(serializer.data, status=status.HTTP_202_ACCEPTED)

#     def destroy(self, request, pk=None):
#         User = User.objects.get(id=pk)
#         User.delete()
#         publish('User_deleted', pk)
#         return Response(status=status.HTTP_204_NO_CONTENT)


# class UserAPIView(APIView):
#     def get(self, _):
#         users = User.objects.all()
#         user = random.choice(users)
#         return Response({
#             'id': user.id
#         })