from django.shortcuts import render

from django.http import HttpResponse
from django.template import loader
from .forms import RegisterOrg,RegisterUser
from .models import User,Organization


orgselected=False
exists=False

def index(request): #get all data from dbs
    orgs= Organization.objects.all()
    users= User.objects.all()
    return render(request, 'index.html', {'orgs':orgs, 'users':users})

#region User
def registerUser(request):
	global orgselected, exists
	orgselected=False
	exists=False
	if request.method == 'POST': #If data is sent => add to db and go back to index
		form = RegisterUser(request.POST)
		if form.is_valid():
			userform = form.cleaned_data
			# userid = userform['user_id'] #autogenerated
			username = userform['username']
			email = userform['email']
			phone = userform['phone']
			org_id = userform['org_id']
			User.objects.create(username=username, email=email, phone=phone, org_id=org_id)
			
			return index(request)
	else: #If no data sent (just visiting register page => render page)
		form = RegisterUser()
	return render(request, 'register.html', {'form': form, 'orgselected':orgselected, 'exists':exists})


def getUser(request, _id): #Get user page with info to edit
	global orgselected, exists
	orgselected=False
	exists=True
	user = User.objects.get(user_id=_id)
	form = RegisterUser(request.POST)
	userform = form.cleaned_data
	username = userform['username']
	email = userform['email']
	phone = userform['phone']
	
	return render(request, 'register.html', {'form': form,'user':user, 'orgselected':orgselected, 'exists':exists})

def editUser(request, _id): #API to change in db and go back to index
	user = User.objects.get(user_id=_id)
	form = RegisterUser(request.POST)
	if form.is_valid():
		userform = form.cleaned_data
		# userid = userform['user_id'] #autogenerated
		username = userform['username']
		email = userform['email']
		phone = userform['phone']
		user.objects.update(username=username, email=email, phone=phone)
		
		return render(request, 'register.html', {'form': form,'users':users})

def deleteUser(request, _id): #API that renders back index
	user = User.objects.get(user_id=_id)
	user.delete()
	# return render(request, 'index.html') #doesn't re-render the db data since not passed
	return index(request)
#endregion

#region Org
def registerOrg(request):
	global orgselected, exists
	orgselected=True
	exists=False
	if request.method == 'POST': #If data is sent => add to db and go back to index
		form = RegisterOrg(request.POST)
		if form.is_valid():
			userform = form.cleaned_data
			# userid = userform['user_id'] #autogenerated
			orgname = userform['orgname']
			email = userform['email']
			phone = userform['phone']
			Organization.objects.create(orgname=orgname, email=email, phone=phone)
			
			return index(request)
	else: #If no data sent (just visiting register page => render page)
		form = RegisterOrg()
	return render(request, 'register.html', {'form': form, 'orgselected':orgselected, 'exists':exists})


def getOrg(request, _id): #Get user page with info to edit
	global orgselected, exists
	orgselected=False
	exists=True
	user = User.objects.get(user_id=_id)
	form = RegisterUser(request.POST)
	userform = form.cleaned_data
	username = userform['username']
	email = userform['email']
	phone = userform['phone']
	
	return render(request, 'register.html', {'form': form,'user':user, 'orgselected':orgselected, 'exists':exists})

def editOrg(request, _id): #API to change in db and go back to index
	org = Organization.objects.get(org_id=_id)
	form = RegisterOrg(request.POST)
	if form.is_valid():
		userform = form.cleaned_data
		# userid = userform['user_id'] #autogenerated
		orgname = userform['orgname']
		email = userform['email']
		phone = userform['phone']
		org.objects.update(orgname=orgname, email=email, phone=phone)

		return render(request, 'register.html', {'form': form,'org':org})

def deleteOrg(request, _id): #API that renders back index
	org = Organization.objects.get(org_id=_id)
	org.delete()
	# return render(request, 'index.html') #doesn't re-render the db data since not passed
	return index(request)
#endregion
